<?php

declare(strict_types=1);

/**
 * This file is part of the guanguans/notify.
 *
 * (c) guanguans <ityaozm@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled.
 */

namespace Guanguans\Notify\Foundation\Testing;

use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Utils;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;

class MockHandler extends \GuzzleHttp\Handler\MockHandler
{
    /**
     * @var null|callable
     */
    public $onFulfilled;

    /**
     * @var null|callable
     */
    public $onRejected;

    /**
     * @var array<\GuzzleHttp\Promise\PromiseInterface>|array<\Psr\Http\Message\ResponseInterface>|array<\Throwable>|array<callable>
     */
    public array $queue;

    /**
     * The passed in value must be an array of
     * {@see \Psr\Http\Message\ResponseInterface} objects, Exceptions,
     * callables, or Promises.
     *
     * @param array<int, mixed> $responseMapper the parameters to be passed to the append function, as an indexed array
     * @param null|callable $onFulfilled callback to invoke when the return value is fulfilled
     * @param null|callable $onRejected callback to invoke when the return value is rejected
     */
    public function __construct(array $responseMapper = [], ?callable $onFulfilled = null, ?callable $onRejected = null)
    {
        $this->onFulfilled = $onFulfilled;
        $this->onRejected = $onRejected;

        $this->setResponseMapper($responseMapper);
    }

    public function __invoke(RequestInterface $request, array $options): PromiseInterface
    {
        return parent::__invoke($request, $options); // TODO: Change the autogenerated stub
    }

    /**
     * Adds one or more variadic requests, exceptions, callables, or promises
     * to the queue.
     *
     * @param mixed ...$values
     */
    public function append(...$values): void
    {
        foreach ($values as $value) {
            if ($value instanceof ResponseInterface
                || $value instanceof \Throwable
                || $value instanceof PromiseInterface
                || \is_callable($value)
            ) {
                $this->queue[] = $value;
            } else {
                throw new \TypeError('Expected a Response, Promise, Throwable or callable. Found '.Utils::describeType($value));
            }
        }
    }

    public function setResponseMapper(array $responseMapper): void {}
}
